                            | # Initial code
0x000:                      | .pos 0
0x000:                      | init:
0x000: 30f40001000000000000 | 	irmovq Stack,%rsp	# Set up stack pointer
0x00a: 30f73800000000000000 | 	irmovq src, %rdi	
0x014: 30f65000000000000000 | 	irmovq dest, %rsi
0x01e: 30f20300000000000000 | 	irmovq $3, %rdx		# len = 3
0x028: 806800000000000000   | 	call copy_block
0x031: 00                   | 	halt
                            | 
0x038:                      | .align 8
                            | # Source block
0x038:                      | src:
0x038: 0a00000000000000     | 	.quad 0x00a
0x040: b000000000000000     | 	.quad 0x0b0
0x048: 000c000000000000     | 	.quad 0xc00
                            | # Destination block
0x050:                      | dest:
0x050: 1101000000000000     | 	.quad 0x111
0x058: 2202000000000000     | 	.quad 0x222
0x060: 3303000000000000     | 	.quad 0x333
                            | 
                            | # long copy_block(long *src, long *dest, long len)
                            | # src in %rdi
                            | # dest in %rsi
                            | # len in %rdx
0x068:                      | copy_block:
0x068: 6300                 | 	xorq %rax, %rax         # result = 0	
0x06a: 30f80100000000000000 | 	irmovq $1, %r8		# Constant 1
0x074: 30f90800000000000000 | 	irmovq $8, %r9		# Constant 8 (to incr ptrs)
0x07e: 6222                 | 	andq %rdx, %rdx		# Test len = 0
0x080: 73b000000000000000   | 	je Done	   		# If len = 0, goto Done
                            | 	
0x089:                      | Loop:
0x089: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# perform copy
0x093: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x09d: 63a0                 | 	xorq %r10, %rax		# result ^= val
0x09f: 6097                 | 	addq %r9, %rdi		# increment *src by 1
0x0a1: 6096                 | 	addq %r9, %rsi		# increment *dest by 1
0x0a3: 6182                 | 	subq %r8, %rdx		# decrement len by 1
0x0a5: 6022                 | 	addq %rdx, %rdx		# Test len = 0
0x0a7: 748900000000000000   | 	jne Loop   		# If len > 0, repeat Loop
                            | 
0x0b0:                      | Done:
0x0b0: 90                   | 	ret			# return
                            | 
0x100:                      | .pos 0x100
0x100:                      | Stack:
